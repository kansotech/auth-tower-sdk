import { SDKConfig } from './types';
import { AuthClient } from './auth-client';
import { TenantClient } from './tenant-client';
import { PermissionClient } from './permission-client';
import { RoleClient } from './role-client';
import { AccountClient } from './account-client';
import { AccessClient } from './access-client';
import { PaginationUtils } from './pagination';
export declare class AuthTowerSDK {
    auth: AuthClient;
    tenants: TenantClient;
    permissions: PermissionClient;
    roles: RoleClient;
    accounts: AccountClient;
    access: AccessClient;
    pagination: typeof PaginationUtils;
    constructor(config: SDKConfig);
    initiateAuth(...args: Parameters<AuthClient['initiateAuth']>): Promise<import("./types").AuthInitiateResponse>;
    getTenants(...args: Parameters<TenantClient['getTenants']>): Promise<import("./types").PaginatedResponse<any>>;
    getTenant(...args: Parameters<TenantClient['getTenant']>): Promise<any>;
    createTenant(...args: Parameters<TenantClient['createTenant']>): Promise<any>;
    getPermissions(...args: Parameters<PermissionClient['getPermissions']>): Promise<import("./types").PaginatedResponse<any>>;
    getPermission(...args: Parameters<PermissionClient['getPermission']>): Promise<any>;
    createPermission(...args: Parameters<PermissionClient['createPermission']>): Promise<any>;
    deletePermission(...args: Parameters<PermissionClient['deletePermission']>): Promise<any>;
    getRoles(...args: Parameters<RoleClient['getRoles']>): Promise<import("./types").PaginatedResponse<any>>;
    createRole(...args: Parameters<RoleClient['createRole']>): Promise<any>;
    getAccounts(...args: Parameters<AccountClient['getAccounts']>): Promise<import("./types").PaginatedResponse<any>>;
    createAccount(...args: Parameters<AccountClient['createAccount']>): Promise<any>;
    grantAccess(...args: Parameters<AccessClient['grantAccess']>): Promise<any>;
    addResource(...args: Parameters<AccessClient['addResource']>): Promise<any>;
    setClientSecret(clientSecret: string): void;
    setTenantId(tenantId: string): void;
    getConfig(): SDKConfig;
    createPagination: typeof PaginationUtils.createPagination;
    getNextPage: typeof PaginationUtils.getNextPage;
    getPreviousPage: typeof PaginationUtils.getPreviousPage;
    hasNextPage: typeof PaginationUtils.hasNextPage;
    hasPreviousPage: typeof PaginationUtils.hasPreviousPage;
    getTotalPages: typeof PaginationUtils.getTotalPages;
    getCurrentPage: typeof PaginationUtils.getCurrentPage;
}
